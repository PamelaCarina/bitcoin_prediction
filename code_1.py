# -*- coding: utf-8 -*-
"""prueba1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uc26fa6DaOP75Kff5Af6HBifELBxBt4i
"""

import numpy as np
import pandas as pd 
from sklearn.metrics import mean_squared_error
import matplotlib.pylab as plt
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 15,6
from statsmodels.tsa.stattools import adfuller #test estadístico que se usa para saber si los datos son estacionarios
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.tsa.arima_model import ARIMA

"""# Estacionaridad de los datos"""

df = pd.read_csv("bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv")
df.dtypes
df.info()
df.describe()
df['Timestamp']=pd.to_datetime(df['Timestamp'], unit='s')
df=df.dropna().reset_index(drop=True)

df = df.set_index('Timestamp')
df_day=df.resample('D').mean()
df_day=df_day.dropna().reset_index(drop=True)
df_month=df.resample('M').mean()
df_year=df.resample('Y').mean()
df_quarter=df.resample('Q').mean()

fig = plt.figure(figsize=[30, 4])
plt.subplot(141)
plt.plot(df_day.Weighted_Price, '-', label='Dias')
plt.legend()

plt.subplot(142)
plt.plot(df_month.Weighted_Price, '-', label='Meses')
plt.legend()

plt.subplot(143)
plt.plot(df_year.Weighted_Price, '-', label='Años')
plt.legend()

plt.subplot(144)
plt.plot(df_quarter.Weighted_Price, '-', label='Cuartil')
plt.legend()

mes=adfuller(df_month.Weighted_Price)
dia=adfuller(df_day.Weighted_Price)
anio=adfuller(df_year.Weighted_Price)
cuartil=adfuller(df_quarter.Weighted_Price)
print('p-value mes: %f'%mes[1])
print('p-value dia: %f'%dia[1])
print('p-value anio: %f'%anio[1])
print('p-value cuartil: %f'%cuartil[1])

def test_stationarity(x):    
    # Dickey Fuller test    
    result=adfuller(x)
    #print('ADF Stastistic: %f'%result[0])
    print('p-value: %0.6f'%result[1])
    pvalue=result[1]
    for key,value in result[4].items():
         if result[0]>value:
            print("No es estacionario")
            break
         else:
            print("Se rechaza hipotesis nula, dato es estacionario")
            break;

ts=df
test_stationarity(df_month.Weighted_Price)

rolmean = df_month.Weighted_Price.rolling(window=9,center=False).mean()
rolstd = df_month.Weighted_Price.rolling(window=12,center=False).std() 

orig = plt.plot(df_month.Weighted_Price, color='blue',label='Original')
mean = plt.plot(rolmean, color='red', label='Rolling Mean')
std = plt.plot(rolstd, color='black', label = 'Rolling Std')

plt.legend(loc='best')
plt.title('Precios del Bitcoin sin modificar')

plt.ylabel("Precios del Bitcoin diarios sin modificar ")
plt.show(block=False)

from scipy import stats

#transformada logaritmica de los datos:

ts_logtrsform = np.log(df_month.Weighted_Price)
test_stationarity(ts_logtrsform)
#transformada box_cox:
df_month['Weighted_Price_box'], lmbda = stats.boxcox(df_month.Weighted_Price)
test_stationarity(df_month.Weighted_Price_box)



#Diferenciacion seasonal:
df_month['prices_box_diff'] = df_month.Weighted_Price_box - df_month.Weighted_Price_box.shift(12)
df_month=df_month.dropna().reset_index(drop=True)
test_stationarity(df_month.prices_box_diff)

#Diferenciacion de primer orden: 

df_month['prices_box_diff2']=df_month.prices_box_diff-df_month.prices_box_diff.shift(1)
df_month=df_month.dropna()
test_stationarity(df_month.prices_box_diff2)
df_month.head()

import statsmodels.api as sm
import statsmodels as sm


#sm.tsa.seasonal_decompose(df_month.prices_box_diff2[13:]).plot()   
#print("Dickey–Fuller test: p=%f" % sm.tsa.stattools.adfuller(df_month.prices_box_diff2[13:])[1])
plt.figure(figsize=(15,7))
ax = plt.subplot(211)
sm.graphics.tsaplots.plot_acf(df_month.prices_box_diff2[13:].values.squeeze(), lags=48, ax=ax)
ax = plt.subplot(212)
sm.graphics.tsaplots.plot_pacf(df_month.prices_box_diff2[13:].values.squeeze(), lags=48, ax=ax)
plt.tight_layout()
plt.show()